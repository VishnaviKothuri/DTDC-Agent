{
  "jira number: jira-125\nstory line: update make payment logic to deduct '0.5%' as transaction fees on all the transfers\ndescription: add transaction fees calculation and deduction functionality to the payment transaction flow. when money is transferred from sender's account to receiver's account, the system should automatically deduct a flat fee of 0.5% from the transaction amount before processing the transfer.\nacceptance criteria: calculate 0.5% fee on the original transaction amount before transfer, deduct the calculated fee from sender's account in addition to the transfer amount, update transaction records to include fee amount and breakdown, ensure fee calculation works for all transaction types (quick pay, transfers, etc.)\nstory points: 5\nreference links:": "1. `com.bank.ops.core.model.Transaction`: Add a new field called `fee` to store the calculated transaction fee, which will be deducted from the original amount before processing the transfer.\n```java\npublic class Transaction {\n    // ... other fields\n    \n    private double fee;\n\n    public double getFee() {\n        return fee;\n    }\n\n    public void setFee(double fee) {\n        this.fee = fee;\n    }\n}\n```\n2. `com.bank.ops.core.dto.PaymentRequest`: Modify the existing class to include a new field called `amount` to store the amount with the deducted transaction fees.\n```java\npublic class PaymentRequest {\n    // ... other fields\n    \n    private double amount;\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n}\n```\n3. `com.bank.ops.reporting.entity.Transaction`: Add a new field called `fee` to store the calculated transaction fee, which will be deducted from the original amount before processing the transfer.\n```java\npublic class Transaction {\n    // ... other fields\n    \n    private double fee;\n\n    public double getFee() {\n        return fee;\n    }\n\n    public void setFee(double fee) {\n        this.fee = fee;\n    }\n}\n```\n4. `com.bank.ops.reporting.dto.TransactionSummaryDto`: Modify the existing class to include a new field called `totalFee` to store the total amount of transaction fees for the reporting period, and a new field called `successfulTransactionsWithFee` to store the number of successful transactions with transaction fees deducted.\n```java\npublic class TransactionSummaryDto {\n    // ... other fields\n    \n    private long totalFee;\n    private long successfulTransactionsWithFee;\n\n    public long getTotalFee() {\n        return totalFee;\n    }\n\n    public void setTotalFee(long totalFee) {\n        this.totalFee = totalFee;\n    }\n\n    public long getSuccessfulTransactionsWithFee() {\n        return successfulTransactionsWithFee;\n    }\n\n    public void setSuccessfulTransactionsWithFee(long successfulTransactionsWithFee) {\n        this.successfulTransactionsWithFee = successfulTransactionsWithFee;\n    }\n}\n```\n5. `com.bank.ops.reporting.dto.AccountGroupedReportDto`: Modify the existing class to include a new field called `totalCreditFees` to store the total amount of credit transaction fees, and a new field called `creditTransactionsWithFee` to store the number of credit transactions with transaction fees deducted.\n```java\npublic class AccountGroupedReportDto {\n    // ... other fields\n    \n    private long totalCreditFees;\n    private long creditTransactionsWithFee;\n\n    public long getTotalCreditFees() {\n        return totalCreditFees;\n    }\n\n    public void setTotalCreditFees(long totalCreditFees) {\n        this.totalCreditFees = totalCreditFees;\n    }\n\n    public long getCreditTransactionsWithFee() {\n        return creditTransactionsWithFee;\n    }\n\n    public void setCreditTransactionsWithFee(long creditTransactionsWithFee) {\n        this.creditTransactionsWithFee = creditTransactionsWithFee;\n    }\n}\n```"
}